version: 2
jobs:
  "percy-finalize":
    docker:
      - image: percyio/agent
    steps:
      - run: percy finalize --all

  'lint-unit-37': &lint-unit
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PYTHON_VERSION: py37
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - run:
          name: 🐍 pip dev requirements
          command: |
            sudo pip install virtualenv --upgrade
            python -m venv || virtualenv venv && . venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
          paths:
              - "venv"
      - run:
          name: 🌸 Lint
          command: |
            . venv/bin/activate
            npm i --ignore-scripts && npm i --ignore-scripts --only=dev
            npm run format:test && npm run lint
            flake8 --ignore=E501,F401,F841,F811,W503 tests
      - run:
          name: 🔎 Unit Tests
          command: |
            npm run test-unit

  'build-dash-37': &build-dash
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
            PYTHON_VERSION: py37
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - run:
          name: 🐍 pip dev requirements
          command: |
            sudo pip install virtualenv --upgrade
            python -m venv || virtualenv venv && . venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
          paths:
              - "venv"
      - run:
          name: 🏗️ build dash
          command: |
            . venv/bin/activate && pip install --upgrade -e . --quiet && mkdir packages
            # build main dash
            git clone --depth 1 https://github.com/plotly/dash.git dash-main
            cd dash-main && pip install -e . && python setup.py sdist && mv dist/* ../packages/
            cd dash-renderer && npm i --ignore-scripts && npm run build:dev && npm run build
            python setup.py sdist && mv dist/* ../../packages/ && cd ../..
            # build dcc
            npm i --ignore-scripts && npm run build && python setup.py sdist && mv dist/* ./packages
            # build html
            git clone --depth 1 https://github.com/plotly/dash-html-components.git
            cd dash-html-components && npm i --ignore-scripts && npm run build
            python setup.py sdist && mv dist/* ../packages
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages

  "test-37": &test
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
            PYTHON_VERSION: py37
            PERCY_PARALLEL_TOTAL: '-1'
            PERCY_ENABLE: '0'
    parallelism: 3
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: 🧪 Run Integration Tests
          command: |
            . venv/bin/activate && cd packages && ls -la
            mv dash-*.tar.gz dash.tar.gz && pip install dash.tar.gz[testing] --quiet && pip list | grep dash | xargs pip uninstall -y
            find . -name "*.gz" | xargs pip install && pip list | grep dash && cd ..
            TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
            pytest --headless --nopercyfinalize --junitxml=test-reports/junit_intg.xml ${TESTFILES}
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts

  "test-legacy-37": &test-legacy
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
            PYTHON_VERSION: py37
            PERCY_PARALLEL_TOTAL: '-1'
            PERCY_ENABLE: '0'
    parallelism: 2
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: 🧪 Run Legacy Integration Tests
          command: |
            . venv/bin/activate && cd packages && ls -la
            mv dash-*.tar.gz dash.tar.gz && pip install dash.tar.gz[testing] --quiet && pip list | grep dash | xargs pip uninstall -y
            find . -name "*.gz" | xargs pip install --quiet && pip list | grep dash && cd ..
            TESTFILES=$(circleci tests glob "tests/test_integration_*.py" | circleci tests split --split-by=timings)
            pytest --durations=10 --junitxml=test-reports/junit_legacy.xml ${TESTFILES}
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts

workflows:
  version: 2
  python3.7:
    jobs:
      - 'lint-unit-37'
      - 'build-dash-37'
      - "test-37":
          requires:
            - build-dash-37
      - "test-legacy-37":
          requires:
            - build-dash-37
      - "percy-finalize":
          requires:
            - "test-37"
            - "test-legacy-37"