% Auto-generated: do not edit by hand
\name{dccTextarea}

\alias{dccTextarea}

\title{Textarea component}

\description{
A basic HTML textarea for entering multiline text.
}

\usage{
dccTextarea(id=NULL, value=NULL, autoFocus=NULL, cols=NULL, disabled=NULL, form=NULL, maxLength=NULL, minLength=NULL, name=NULL, placeholder=NULL, readOnly=NULL, required=NULL, rows=NULL, wrap=NULL, accessKey=NULL, className=NULL, contentEditable=NULL, contextMenu=NULL, dir=NULL, draggable=NULL, hidden=NULL, lang=NULL, spellCheck=NULL, style=NULL, tabIndex=NULL, title=NULL, n_blur=NULL, n_blur_timestamp=NULL, n_clicks=NULL, n_clicks_timestamp=NULL, loading_state=NULL)
}

\arguments{
\item{id}{The ID of this component, used to identify dash components
in callbacks. The ID needs to be unique across all of the
components in an app.}

\item{value}{The value of the textarea}

\item{autoFocus}{The element should be automatically focused after the page loaded.}

\item{cols}{Defines the number of columns in a textarea.}

\item{disabled}{Indicates whether the user can interact with the element.}

\item{form}{Indicates the form that is the owner of the element.}

\item{maxLength}{Defines the maximum number of characters allowed in the element.}

\item{minLength}{Defines the minimum number of characters allowed in the element.}

\item{name}{Name of the element. For example used by the server to identify the fields in form submits.}

\item{placeholder}{Provides a hint to the user of what can be entered in the field.}

\item{readOnly}{Indicates whether the element can be edited.
readOnly is an HTML boolean attribute - it is enabled by a boolean or
'readOnly'. Alternative capitalizations `readonly` & `READONLY`
are also acccepted.}

\item{required}{Indicates whether this element is required to fill out or not.
required is an HTML boolean attribute - it is enabled by a boolean or
'required'. Alternative capitalizations `REQUIRED`
are also acccepted.}

\item{rows}{Defines the number of rows in a text area.}

\item{wrap}{Indicates whether the text should be wrapped.}

\item{accessKey}{Defines a keyboard shortcut to activate or add focus to the element.}

\item{className}{Often used with CSS to style elements with common properties.}

\item{contentEditable}{Indicates whether the element's content is editable.}

\item{contextMenu}{Defines the ID of a <menu> element which will serve as the element's context menu.}

\item{dir}{Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)}

\item{draggable}{Defines whether the element can be dragged.}

\item{hidden}{Prevents rendering of given element, while keeping child elements, e.g. script elements, active.}

\item{lang}{Defines the language used in the element.}

\item{spellCheck}{Indicates whether spell checking is allowed for the element.}

\item{style}{Defines CSS styles which will override styles previously set.}

\item{tabIndex}{Overrides the browser's default tab order and follows the one specified instead.}

\item{title}{Text to be displayed in a tooltip when hovering over the element.}

\item{n_blur}{Number of times the textarea lost focus.}

\item{n_blur_timestamp}{Last time the textarea lost focus.}

\item{n_clicks}{Number of times the textarea has been clicked.}

\item{n_clicks_timestamp}{Last time the textarea was clicked.}

\item{loading_state}{Object that holds the loading state object coming from dash-renderer}
}
